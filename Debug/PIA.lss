
PIA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000009ee  00000a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800102  00800102  00000a84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dbe  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ba  00000000  00000000  000021f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000653  00000000  00000000  000031c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000381a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_14>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	9f 00       	.word	0x009f	; ????
  6a:	b5 00       	.word	0x00b5	; ????
  6c:	cb 00       	.word	0x00cb	; ????
  6e:	e1 00       	.word	0x00e1	; ????
  70:	f7 00       	.word	0x00f7	; ????
  72:	0d 01       	movw	r0, r26
  74:	23 01       	movw	r4, r6
  76:	39 01       	movw	r6, r18
  78:	4f 01       	movw	r8, r30
  7a:	65 01       	movw	r12, r10

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee ee       	ldi	r30, 0xEE	; 238
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ac 30       	cpi	r26, 0x0C	; 12
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  b2:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <init_adc>:

void init_adc(void)
{
	//Avcc como pin de referencia
	//ADMUX &=~ (1<<REFS1);
	ADMUX |=  (1<<REFS0);
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	
	//Ajustar a 8 bits
	ADMUX |= (1<<ADLAR);
  c4:	80 81       	ld	r24, Z
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	80 83       	st	Z, r24
	
	// Escoger el PIN a leer ADC5
	ADMUX &=~ (1<<MUX3);
  ca:	80 81       	ld	r24, Z
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX2);
  d0:	80 81       	ld	r24, Z
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	80 83       	st	Z, r24
	ADMUX &=~ (1<<MUX1);
  d6:	80 81       	ld	r24, Z
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 83       	st	Z, r24
	ADMUX |=  (1<<MUX0);
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
	
	//Freeruning
	ADCSRA |= (1<<ADATE);
  e2:	ea e7       	ldi	r30, 0x7A	; 122
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	80 83       	st	Z, r24
	
	//Enable interrupt
	ADCSRA |= (1<<ADIE);
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
	//velocidad de muestreo
	// 16 MHz clock / 128 = 125 kHz ADC clock debe de estar entre 50 - 200Khz
	ADCSRA |= (1<<ADPS2);
  f2:	80 81       	ld	r24, Z
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS1);
  f8:	80 81       	ld	r24, Z
  fa:	82 60       	ori	r24, 0x02	; 2
  fc:	80 83       	st	Z, r24
	ADCSRA |=  (1<<ADPS0);
  fe:	80 81       	ld	r24, Z
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 83       	st	Z, r24
 104:	08 95       	ret

00000106 <ADC_on>:
}

void ADC_on(void)
{
	//Encendemos el ADC
	ADCSRA |= (1<<ADEN);
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	80 83       	st	Z, r24
	// Iniciar la conversión
	ADCSRA |= (1 << ADSC);
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <init_display>:

#define TIME 10

void init_display(void)
{
	DDRD |= (_BV(SEGA) | _BV(SEGB) | _BV(SEGC) | _BV(SEGD) | _BV(SEGE) | _BV(SEGF));
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	8c 6f       	ori	r24, 0xFC	; 252
 11c:	8a b9       	out	0x0a, r24	; 10
	DDRB |= _BV(SEGG);
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	81 60       	ori	r24, 0x01	; 1
 122:	84 b9       	out	0x04, r24	; 4
	COMMON_DDRX |= (_BV(COMMON_LED1) | _BV(COMMON_LED2) | _BV(COMMON_LED3) | _BV(COMMON_LED4));
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8e 61       	ori	r24, 0x1E	; 30
 128:	84 b9       	out	0x04, r24	; 4
 12a:	08 95       	ret

0000012c <show_numbers>:
}

void show_numbers(uint16_t num)
{
	
	switch (num)
 12c:	8a 30       	cpi	r24, 0x0A	; 10
 12e:	91 05       	cpc	r25, r1
 130:	08 f0       	brcs	.+2      	; 0x134 <show_numbers+0x8>
 132:	e0 c0       	rjmp	.+448    	; 0x2f4 <show_numbers+0x1c8>
 134:	fc 01       	movw	r30, r24
 136:	ec 5c       	subi	r30, 0xCC	; 204
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__tablejump2__>
	{
		case 0:
		SEGA_ON;
 13e:	8b b1       	in	r24, 0x0b	; 11
 140:	84 60       	ori	r24, 0x04	; 4
 142:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 144:	8b b1       	in	r24, 0x0b	; 11
 146:	88 60       	ori	r24, 0x08	; 8
 148:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 61       	ori	r24, 0x10	; 16
 14e:	8b b9       	out	0x0b, r24	; 11
		SEGD_ON;
 150:	8b b1       	in	r24, 0x0b	; 11
 152:	80 62       	ori	r24, 0x20	; 32
 154:	8b b9       	out	0x0b, r24	; 11
		SEGE_ON;
 156:	8b b1       	in	r24, 0x0b	; 11
 158:	80 64       	ori	r24, 0x40	; 64
 15a:	8b b9       	out	0x0b, r24	; 11
		SEGF_ON;
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	8b b9       	out	0x0b, r24	; 11
		SEGG_OFF;
 162:	85 b1       	in	r24, 0x05	; 5
 164:	8e 7f       	andi	r24, 0xFE	; 254
 166:	85 b9       	out	0x05, r24	; 5
		break;
 168:	08 95       	ret
		case 1:
		SEGA_OFF;
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	88 60       	ori	r24, 0x08	; 8
 174:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	8b b9       	out	0x0b, r24	; 11
		SEGD_OFF;
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8f 7d       	andi	r24, 0xDF	; 223
 180:	8b b9       	out	0x0b, r24	; 11
		SEGE_OFF;
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8f 7b       	andi	r24, 0xBF	; 191
 186:	8b b9       	out	0x0b, r24	; 11
		SEGF_OFF;
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	8b b9       	out	0x0b, r24	; 11
		SEGG_OFF;
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	8e 7f       	andi	r24, 0xFE	; 254
 192:	85 b9       	out	0x05, r24	; 5
		break;
 194:	08 95       	ret
		case 2:
		SEGA_ON;
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	88 60       	ori	r24, 0x08	; 8
 1a0:	8b b9       	out	0x0b, r24	; 11
		SEGC_OFF;
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	8f 7e       	andi	r24, 0xEF	; 239
 1a6:	8b b9       	out	0x0b, r24	; 11
		SEGD_ON;
 1a8:	8b b1       	in	r24, 0x0b	; 11
 1aa:	80 62       	ori	r24, 0x20	; 32
 1ac:	8b b9       	out	0x0b, r24	; 11
		SEGE_ON;
 1ae:	8b b1       	in	r24, 0x0b	; 11
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	8b b9       	out	0x0b, r24	; 11
		SEGF_OFF;
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	8f 77       	andi	r24, 0x7F	; 127
 1b8:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	85 b9       	out	0x05, r24	; 5
		
		break;
 1c0:	08 95       	ret
		case 3:
		SEGA_ON;
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	84 60       	ori	r24, 0x04	; 4
 1c6:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 1c8:	8b b1       	in	r24, 0x0b	; 11
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	8b b9       	out	0x0b, r24	; 11
		SEGD_ON;
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	8b b9       	out	0x0b, r24	; 11
		SEGE_OFF;
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8f 7b       	andi	r24, 0xBF	; 191
 1de:	8b b9       	out	0x0b, r24	; 11
		SEGF_OFF;
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	8f 77       	andi	r24, 0x7F	; 127
 1e4:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 1e6:	85 b1       	in	r24, 0x05	; 5
 1e8:	81 60       	ori	r24, 0x01	; 1
 1ea:	85 b9       	out	0x05, r24	; 5
		break;
 1ec:	08 95       	ret
		case 4:
		SEGA_OFF;
 1ee:	8b b1       	in	r24, 0x0b	; 11
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 1fa:	8b b1       	in	r24, 0x0b	; 11
 1fc:	80 61       	ori	r24, 0x10	; 16
 1fe:	8b b9       	out	0x0b, r24	; 11
		SEGD_OFF;
 200:	8b b1       	in	r24, 0x0b	; 11
 202:	8f 7d       	andi	r24, 0xDF	; 223
 204:	8b b9       	out	0x0b, r24	; 11
		SEGE_OFF;
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	8b b9       	out	0x0b, r24	; 11
		SEGF_ON;
 20c:	8b b1       	in	r24, 0x0b	; 11
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 212:	85 b1       	in	r24, 0x05	; 5
 214:	81 60       	ori	r24, 0x01	; 1
 216:	85 b9       	out	0x05, r24	; 5
		break;
 218:	08 95       	ret
		case 5:
		SEGA_ON;
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	84 60       	ori	r24, 0x04	; 4
 21e:	8b b9       	out	0x0b, r24	; 11
		SEGB_OFF;
 220:	8b b1       	in	r24, 0x0b	; 11
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 61       	ori	r24, 0x10	; 16
 22a:	8b b9       	out	0x0b, r24	; 11
		SEGD_ON;
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	80 62       	ori	r24, 0x20	; 32
 230:	8b b9       	out	0x0b, r24	; 11
		SEGE_OFF;
 232:	8b b1       	in	r24, 0x0b	; 11
 234:	8f 7b       	andi	r24, 0xBF	; 191
 236:	8b b9       	out	0x0b, r24	; 11
		SEGF_ON;
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	80 68       	ori	r24, 0x80	; 128
 23c:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	81 60       	ori	r24, 0x01	; 1
 242:	85 b9       	out	0x05, r24	; 5
		break;
 244:	08 95       	ret
		case 6:
		SEGA_OFF;
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	8b 7f       	andi	r24, 0xFB	; 251
 24a:	8b b9       	out	0x0b, r24	; 11
		SEGB_OFF;
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 252:	8b b1       	in	r24, 0x0b	; 11
 254:	80 61       	ori	r24, 0x10	; 16
 256:	8b b9       	out	0x0b, r24	; 11
		SEGD_ON;
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	8b b9       	out	0x0b, r24	; 11
		SEGE_ON;
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	80 64       	ori	r24, 0x40	; 64
 262:	8b b9       	out	0x0b, r24	; 11
		SEGF_ON;
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	80 68       	ori	r24, 0x80	; 128
 268:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 26a:	85 b1       	in	r24, 0x05	; 5
 26c:	81 60       	ori	r24, 0x01	; 1
 26e:	85 b9       	out	0x05, r24	; 5
		break;
 270:	08 95       	ret
		case 7:
		SEGA_ON;
 272:	8b b1       	in	r24, 0x0b	; 11
 274:	84 60       	ori	r24, 0x04	; 4
 276:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 27e:	8b b1       	in	r24, 0x0b	; 11
 280:	80 61       	ori	r24, 0x10	; 16
 282:	8b b9       	out	0x0b, r24	; 11
		SEGD_OFF;
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	8f 7d       	andi	r24, 0xDF	; 223
 288:	8b b9       	out	0x0b, r24	; 11
		SEGE_OFF;
 28a:	8b b1       	in	r24, 0x0b	; 11
 28c:	8f 7b       	andi	r24, 0xBF	; 191
 28e:	8b b9       	out	0x0b, r24	; 11
		SEGF_OFF;
 290:	8b b1       	in	r24, 0x0b	; 11
 292:	8f 77       	andi	r24, 0x7F	; 127
 294:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 296:	85 b1       	in	r24, 0x05	; 5
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	85 b9       	out	0x05, r24	; 5
		break;
 29c:	08 95       	ret
		case 8:
		SEGA_ON;
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	84 60       	ori	r24, 0x04	; 4
 2a2:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 2a4:	8b b1       	in	r24, 0x0b	; 11
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 2aa:	8b b1       	in	r24, 0x0b	; 11
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	8b b9       	out	0x0b, r24	; 11
		SEGD_ON;
 2b0:	8b b1       	in	r24, 0x0b	; 11
 2b2:	80 62       	ori	r24, 0x20	; 32
 2b4:	8b b9       	out	0x0b, r24	; 11
		SEGE_ON;
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	80 64       	ori	r24, 0x40	; 64
 2ba:	8b b9       	out	0x0b, r24	; 11
		SEGF_ON;
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	85 b9       	out	0x05, r24	; 5
		break;
 2c8:	08 95       	ret
		case 9:
		SEGA_ON;
 2ca:	8b b1       	in	r24, 0x0b	; 11
 2cc:	84 60       	ori	r24, 0x04	; 4
 2ce:	8b b9       	out	0x0b, r24	; 11
		SEGB_ON;
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	8b b9       	out	0x0b, r24	; 11
		SEGC_ON;
 2d6:	8b b1       	in	r24, 0x0b	; 11
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	8b b9       	out	0x0b, r24	; 11
		SEGD_OFF;
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	8f 7d       	andi	r24, 0xDF	; 223
 2e0:	8b b9       	out	0x0b, r24	; 11
		SEGE_OFF;
 2e2:	8b b1       	in	r24, 0x0b	; 11
 2e4:	8f 7b       	andi	r24, 0xBF	; 191
 2e6:	8b b9       	out	0x0b, r24	; 11
		SEGF_ON;
 2e8:	8b b1       	in	r24, 0x0b	; 11
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	8b b9       	out	0x0b, r24	; 11
		SEGG_ON;
 2ee:	85 b1       	in	r24, 0x05	; 5
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	08 95       	ret

000002f6 <init_ports>:
#include <avr/io.h>
#include "input.h"

void init_ports(void)
{
	DDRC &=	~_BV(MODO);
 2f6:	87 b1       	in	r24, 0x07	; 7
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~_BV(ASC);
 2fc:	87 b1       	in	r24, 0x07	; 7
 2fe:	8d 7f       	andi	r24, 0xFD	; 253
 300:	87 b9       	out	0x07, r24	; 7
	DDRC &= ~_BV(DES);
 302:	87 b1       	in	r24, 0x07	; 7
 304:	8b 7f       	andi	r24, 0xFB	; 251
 306:	87 b9       	out	0x07, r24	; 7
 308:	08 95       	ret

0000030a <contadorFun>:
		}
    }
}

void contadorFun(uint16_t numero)
{
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	0f 93       	push	r16
 310:	1f 93       	push	r17
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ec 01       	movw	r28, r24
	millares = numero / 1000;
 318:	7c 01       	movw	r14, r24
 31a:	f6 94       	lsr	r15
 31c:	e7 94       	ror	r14
 31e:	f6 94       	lsr	r15
 320:	e7 94       	ror	r14
 322:	f6 94       	lsr	r15
 324:	e7 94       	ror	r14
 326:	97 01       	movw	r18, r14
 328:	a5 ec       	ldi	r26, 0xC5	; 197
 32a:	b0 e2       	ldi	r27, 0x20	; 32
 32c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__umulhisi3>
 330:	8c 01       	movw	r16, r24
 332:	12 95       	swap	r17
 334:	02 95       	swap	r16
 336:	0f 70       	andi	r16, 0x0F	; 15
 338:	01 27       	eor	r16, r17
 33a:	1f 70       	andi	r17, 0x0F	; 15
 33c:	01 27       	eor	r16, r17
 33e:	00 93 0b 01 	sts	0x010B, r16	; 0x80010b <millares>
	COMMON_LED1_ON;
 342:	85 b1       	in	r24, 0x05	; 5
 344:	8f 7e       	andi	r24, 0xEF	; 239
 346:	85 b9       	out	0x05, r24	; 5
	COMMON_LED2_OFF;
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	88 60       	ori	r24, 0x08	; 8
 34c:	85 b9       	out	0x05, r24	; 5
	COMMON_LED3_OFF;
 34e:	85 b1       	in	r24, 0x05	; 5
 350:	84 60       	ori	r24, 0x04	; 4
 352:	85 b9       	out	0x05, r24	; 5
	COMMON_LED4_OFF;
 354:	85 b1       	in	r24, 0x05	; 5
 356:	82 60       	ori	r24, 0x02	; 2
 358:	85 b9       	out	0x05, r24	; 5
	show_numbers(millares);
 35a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <millares>
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 96 00 	call	0x12c	; 0x12c <show_numbers>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	8f e8       	ldi	r24, 0x8F	; 143
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <contadorFun+0x5e>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <contadorFun+0x64>
 36e:	00 00       	nop
	_delay_us(TIME);
	COMMON_LED1_OFF;
 370:	85 b1       	in	r24, 0x05	; 5
 372:	80 61       	ori	r24, 0x10	; 16
 374:	85 b9       	out	0x05, r24	; 5
	COMMON_LED2_ON;
 376:	85 b1       	in	r24, 0x05	; 5
 378:	87 7f       	andi	r24, 0xF7	; 247
 37a:	85 b9       	out	0x05, r24	; 5
	COMMON_LED3_OFF;
 37c:	85 b1       	in	r24, 0x05	; 5
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	85 b9       	out	0x05, r24	; 5
	COMMON_LED4_OFF;
 382:	85 b1       	in	r24, 0x05	; 5
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 b9       	out	0x05, r24	; 5
	centenas = (numero%1000)/100;
 388:	28 ee       	ldi	r18, 0xE8	; 232
 38a:	33 e0       	ldi	r19, 0x03	; 3
 38c:	02 9f       	mul	r16, r18
 38e:	c0 01       	movw	r24, r0
 390:	03 9f       	mul	r16, r19
 392:	90 0d       	add	r25, r0
 394:	12 9f       	mul	r17, r18
 396:	90 0d       	add	r25, r0
 398:	11 24       	eor	r1, r1
 39a:	9e 01       	movw	r18, r28
 39c:	28 1b       	sub	r18, r24
 39e:	39 0b       	sbc	r19, r25
 3a0:	36 95       	lsr	r19
 3a2:	27 95       	ror	r18
 3a4:	36 95       	lsr	r19
 3a6:	27 95       	ror	r18
 3a8:	ab e7       	ldi	r26, 0x7B	; 123
 3aa:	b4 e1       	ldi	r27, 0x14	; 20
 3ac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__umulhisi3>
 3b0:	96 95       	lsr	r25
 3b2:	87 95       	ror	r24
 3b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <centenas>
	show_numbers(centenas);
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 96 00 	call	0x12c	; 0x12c <show_numbers>
 3be:	8f e8       	ldi	r24, 0x8F	; 143
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <contadorFun+0xb8>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <contadorFun+0xbe>
 3c8:	00 00       	nop
	_delay_us(TIME);
	COMMON_LED1_OFF;
 3ca:	85 b1       	in	r24, 0x05	; 5
 3cc:	80 61       	ori	r24, 0x10	; 16
 3ce:	85 b9       	out	0x05, r24	; 5
	COMMON_LED2_OFF;
 3d0:	85 b1       	in	r24, 0x05	; 5
 3d2:	88 60       	ori	r24, 0x08	; 8
 3d4:	85 b9       	out	0x05, r24	; 5
	COMMON_LED3_ON;
 3d6:	85 b1       	in	r24, 0x05	; 5
 3d8:	8b 7f       	andi	r24, 0xFB	; 251
 3da:	85 b9       	out	0x05, r24	; 5
	COMMON_LED4_OFF;
 3dc:	85 b1       	in	r24, 0x05	; 5
 3de:	82 60       	ori	r24, 0x02	; 2
 3e0:	85 b9       	out	0x05, r24	; 5
	decenas = (numero%100)/10;
 3e2:	9e 01       	movw	r18, r28
 3e4:	36 95       	lsr	r19
 3e6:	27 95       	ror	r18
 3e8:	36 95       	lsr	r19
 3ea:	27 95       	ror	r18
 3ec:	ab e7       	ldi	r26, 0x7B	; 123
 3ee:	b4 e1       	ldi	r27, 0x14	; 20
 3f0:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__umulhisi3>
 3f4:	9c 01       	movw	r18, r24
 3f6:	36 95       	lsr	r19
 3f8:	27 95       	ror	r18
 3fa:	44 e6       	ldi	r20, 0x64	; 100
 3fc:	42 9f       	mul	r20, r18
 3fe:	c0 01       	movw	r24, r0
 400:	43 9f       	mul	r20, r19
 402:	90 0d       	add	r25, r0
 404:	11 24       	eor	r1, r1
 406:	9e 01       	movw	r18, r28
 408:	28 1b       	sub	r18, r24
 40a:	39 0b       	sbc	r19, r25
 40c:	ad ec       	ldi	r26, 0xCD	; 205
 40e:	bc ec       	ldi	r27, 0xCC	; 204
 410:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__umulhisi3>
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <decenas>
	show_numbers(decenas);
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 96 00 	call	0x12c	; 0x12c <show_numbers>
 42a:	8f e8       	ldi	r24, 0x8F	; 143
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 434:	00 00       	nop
	_delay_us(TIME);
	COMMON_LED1_OFF;
 436:	85 b1       	in	r24, 0x05	; 5
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	85 b9       	out	0x05, r24	; 5
	COMMON_LED2_OFF;
 43c:	85 b1       	in	r24, 0x05	; 5
 43e:	88 60       	ori	r24, 0x08	; 8
 440:	85 b9       	out	0x05, r24	; 5
	COMMON_LED3_OFF;
 442:	85 b1       	in	r24, 0x05	; 5
 444:	84 60       	ori	r24, 0x04	; 4
 446:	85 b9       	out	0x05, r24	; 5
	COMMON_LED4_ON;
 448:	85 b1       	in	r24, 0x05	; 5
 44a:	8d 7f       	andi	r24, 0xFD	; 253
 44c:	85 b9       	out	0x05, r24	; 5
	unidades = numero%10;
 44e:	9e 01       	movw	r18, r28
 450:	ad ec       	ldi	r26, 0xCD	; 205
 452:	bc ec       	ldi	r27, 0xCC	; 204
 454:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__umulhisi3>
 458:	96 95       	lsr	r25
 45a:	87 95       	ror	r24
 45c:	96 95       	lsr	r25
 45e:	87 95       	ror	r24
 460:	96 95       	lsr	r25
 462:	87 95       	ror	r24
 464:	9c 01       	movw	r18, r24
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	9e 01       	movw	r18, r28
 47c:	28 1b       	sub	r18, r24
 47e:	39 0b       	sbc	r19, r25
 480:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <unidades>
	show_numbers(unidades);
 484:	82 2f       	mov	r24, r18
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 96 00 	call	0x12c	; 0x12c <show_numbers>
 48c:	8f e8       	ldi	r24, 0x8F	; 143
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 494:	00 c0       	rjmp	.+0      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 496:	00 00       	nop
	_delay_us(TIME);
	COMMON_LED1_OFF;
 498:	85 b1       	in	r24, 0x05	; 5
 49a:	80 61       	ori	r24, 0x10	; 16
 49c:	85 b9       	out	0x05, r24	; 5
	COMMON_LED2_OFF;
 49e:	85 b1       	in	r24, 0x05	; 5
 4a0:	88 60       	ori	r24, 0x08	; 8
 4a2:	85 b9       	out	0x05, r24	; 5
	COMMON_LED3_OFF;
 4a4:	85 b1       	in	r24, 0x05	; 5
 4a6:	84 60       	ori	r24, 0x04	; 4
 4a8:	85 b9       	out	0x05, r24	; 5
	COMMON_LED4_OFF;
 4aa:	85 b1       	in	r24, 0x05	; 5
 4ac:	82 60       	ori	r24, 0x02	; 2
 4ae:	85 b9       	out	0x05, r24	; 5
 4b0:	8f e8       	ldi	r24, 0x8F	; 143
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4ba:	00 00       	nop
	_delay_us(TIME);
}
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	1f 91       	pop	r17
 4c2:	0f 91       	pop	r16
 4c4:	ff 90       	pop	r15
 4c6:	ef 90       	pop	r14
 4c8:	08 95       	ret

000004ca <main>:
//y mostrar el contadro con uint_8t | crear una nueva funcion para contador y en ella pasar valores uint16 | Crear funciones variadicas en show_number y contadorAutomatico.


int main(void)
{
	cli();
 4ca:	f8 94       	cli
	init_display();
 4cc:	0e 94 8c 00 	call	0x118	; 0x118 <init_display>
	init_ports();
 4d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <init_ports>
    init_timer();
 4d4:	0e 94 44 03 	call	0x688	; 0x688 <init_timer>
	init_adc();
 4d8:	0e 94 5d 00 	call	0xba	; 0xba <init_adc>
	sei();
 4dc:	78 94       	sei
	ADC_on();
 4de:	0e 94 83 00 	call	0x106	; 0x106 <ADC_on>
	
    while (1) 
    {
		uint16_t conversor = 0;
		if(modoReg == 0)
 4e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <modoReg>
 4e6:	81 11       	cpse	r24, r1
 4e8:	0a c0       	rjmp	.+20     	; 0x4fe <main+0x34>
		{
			conversor = (uint16_t) contador; //Convierte los contadores de uint8 a uint16
 4ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contador>
			contadorFun(conversor);
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 85 01 	call	0x30a	; 0x30a <contadorFun>
 4f4:	85 e3       	ldi	r24, 0x35	; 53
 4f6:	8a 95       	dec	r24
 4f8:	f1 f7       	brne	.-4      	; 0x4f6 <main+0x2c>
 4fa:	00 00       	nop
 4fc:	f2 cf       	rjmp	.-28     	; 0x4e2 <main+0x18>
			_delay_us(10);
		}
		else if (modoReg == 1)
 4fe:	81 30       	cpi	r24, 0x01	; 1
 500:	51 f4       	brne	.+20     	; 0x516 <main+0x4c>
		{
			conversor = (uint16_t) contador_asc;
 502:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador_asc>
			contadorFun(conversor);
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 85 01 	call	0x30a	; 0x30a <contadorFun>
 50c:	85 e3       	ldi	r24, 0x35	; 53
 50e:	8a 95       	dec	r24
 510:	f1 f7       	brne	.-4      	; 0x50e <main+0x44>
 512:	00 00       	nop
 514:	e6 cf       	rjmp	.-52     	; 0x4e2 <main+0x18>
			_delay_us(10);
		}
		else if (modoReg == 2)
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	51 f4       	brne	.+20     	; 0x52e <main+0x64>
		{
			conversor = (uint16_t) contador_des;
 51a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			contadorFun(conversor);
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 85 01 	call	0x30a	; 0x30a <contadorFun>
 524:	85 e3       	ldi	r24, 0x35	; 53
 526:	8a 95       	dec	r24
 528:	f1 f7       	brne	.-4      	; 0x526 <main+0x5c>
 52a:	00 00       	nop
 52c:	da cf       	rjmp	.-76     	; 0x4e2 <main+0x18>
			_delay_us(10);
		}
		else if (modoReg == 3)
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	c1 f6       	brne	.-80     	; 0x4e2 <main+0x18>
		{
			contadorFun(format);
 532:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 536:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 53a:	0e 94 85 01 	call	0x30a	; 0x30a <contadorFun>
 53e:	d1 cf       	rjmp	.-94     	; 0x4e2 <main+0x18>

00000540 <__vector_14>:
	COMMON_LED4_OFF;
	_delay_us(TIME);
}

ISR(TIMER0_COMPA_vect)
{
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
	if (MODO_PRESS && !ASC_PRESS && !DES_PRESS)
 562:	30 9b       	sbis	0x06, 0	; 6
 564:	0a c0       	rjmp	.+20     	; 0x57a <__vector_14+0x3a>
 566:	31 99       	sbic	0x06, 1	; 6
 568:	08 c0       	rjmp	.+16     	; 0x57a <__vector_14+0x3a>
 56a:	32 99       	sbic	0x06, 2	; 6
 56c:	06 c0       	rjmp	.+12     	; 0x57a <__vector_14+0x3a>
	{
		modoReg++;
 56e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <modoReg>
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <modoReg>
 578:	66 c0       	rjmp	.+204    	; 0x646 <__vector_14+0x106>
	}
	else if(modoReg == 0)
 57a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <modoReg>
 57e:	81 11       	cpse	r24, r1
 580:	11 c0       	rjmp	.+34     	; 0x5a4 <__vector_14+0x64>
	{
		if(contador < 159)
 582:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <contador>
 586:	8f 39       	cpi	r24, 0x9F	; 159
 588:	50 f4       	brcc	.+20     	; 0x59e <__vector_14+0x5e>
		{
			contador++;
 58a:	8f 5f       	subi	r24, 0xFF	; 255
 58c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <contador>
 590:	8f e8       	ldi	r24, 0x8F	; 143
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <__vector_14+0x54>
 598:	00 c0       	rjmp	.+0      	; 0x59a <__vector_14+0x5a>
 59a:	00 00       	nop
 59c:	54 c0       	rjmp	.+168    	; 0x646 <__vector_14+0x106>
			_delay_us(TIME);
		}
		else
		{
			contador = 0;
 59e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <contador>
 5a2:	51 c0       	rjmp	.+162    	; 0x646 <__vector_14+0x106>
		}
	}
	else if (modoReg == 1)
 5a4:	81 30       	cpi	r24, 0x01	; 1
 5a6:	c1 f4       	brne	.+48     	; 0x5d8 <__vector_14+0x98>
	{
		if (!MODO_PRESS && ASC_PRESS && !DES_PRESS)
 5a8:	30 99       	sbic	0x06, 0	; 6
 5aa:	4d c0       	rjmp	.+154    	; 0x646 <__vector_14+0x106>
 5ac:	31 9b       	sbis	0x06, 1	; 6
 5ae:	4b c0       	rjmp	.+150    	; 0x646 <__vector_14+0x106>
 5b0:	32 99       	sbic	0x06, 2	; 6
 5b2:	49 c0       	rjmp	.+146    	; 0x646 <__vector_14+0x106>
		{
			contador_asc++;
 5b4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador_asc>
 5b8:	8f 5f       	subi	r24, 0xFF	; 255
 5ba:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <contador_asc>
 5be:	8f e8       	ldi	r24, 0x8F	; 143
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <__vector_14+0x82>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <__vector_14+0x88>
 5c8:	00 00       	nop
			_delay_us(TIME);
			if (contador_asc > 159)
 5ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <contador_asc>
 5ce:	80 3a       	cpi	r24, 0xA0	; 160
 5d0:	d0 f1       	brcs	.+116    	; 0x646 <__vector_14+0x106>
			{
				contador_asc = 0;
 5d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <contador_asc>
 5d6:	37 c0       	rjmp	.+110    	; 0x646 <__vector_14+0x106>
			}
		}
	}
	else if (modoReg == 2)
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	c9 f4       	brne	.+50     	; 0x60e <__vector_14+0xce>
	{
		if (!MODO_PRESS && !ASC_PRESS && DES_PRESS)
 5dc:	30 99       	sbic	0x06, 0	; 6
 5de:	33 c0       	rjmp	.+102    	; 0x646 <__vector_14+0x106>
 5e0:	31 99       	sbic	0x06, 1	; 6
 5e2:	31 c0       	rjmp	.+98     	; 0x646 <__vector_14+0x106>
 5e4:	32 9b       	sbis	0x06, 2	; 6
 5e6:	2f c0       	rjmp	.+94     	; 0x646 <__vector_14+0x106>
		{
			contador_des--;
 5e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5ec:	81 50       	subi	r24, 0x01	; 1
 5ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f2:	8f e8       	ldi	r24, 0x8F	; 143
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <__vector_14+0xb6>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <__vector_14+0xbc>
 5fc:	00 00       	nop
			_delay_us(TIME);
			
			if (contador_des == 255)
 5fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 602:	8f 3f       	cpi	r24, 0xFF	; 255
 604:	01 f5       	brne	.+64     	; 0x646 <__vector_14+0x106>
			{
				contador_des = 159;
 606:	8f e9       	ldi	r24, 0x9F	; 159
 608:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 60c:	1c c0       	rjmp	.+56     	; 0x646 <__vector_14+0x106>
			}
		}
	}
	else if (modoReg == 3)
 60e:	83 30       	cpi	r24, 0x03	; 3
 610:	b1 f4       	brne	.+44     	; 0x63e <__vector_14+0xfe>
	{
		double aux = 3.91764;
		format = (uint16_t)ceil(potValue*aux);
 612:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <potValue>
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 a6 03 	call	0x74c	; 0x74c <__floatsisf>
 620:	2d e9       	ldi	r18, 0x9D	; 157
 622:	3a eb       	ldi	r19, 0xBA	; 186
 624:	4a e7       	ldi	r20, 0x7A	; 122
 626:	50 e4       	ldi	r21, 0x40	; 64
 628:	0e 94 4b 04 	call	0x896	; 0x896 <__mulsf3>
 62c:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ceil>
 630:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fixunssfsi>
 634:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__data_end+0x1>
 638:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__data_end>
 63c:	04 c0       	rjmp	.+8      	; 0x646 <__vector_14+0x106>
	}
	else if(modoReg > 3)
 63e:	84 30       	cpi	r24, 0x04	; 4
 640:	10 f0       	brcs	.+4      	; 0x646 <__vector_14+0x106>
	{
		modoReg = 0;
 642:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <modoReg>
	}
	
}
 646:	ff 91       	pop	r31
 648:	ef 91       	pop	r30
 64a:	bf 91       	pop	r27
 64c:	af 91       	pop	r26
 64e:	9f 91       	pop	r25
 650:	8f 91       	pop	r24
 652:	7f 91       	pop	r23
 654:	6f 91       	pop	r22
 656:	5f 91       	pop	r21
 658:	4f 91       	pop	r20
 65a:	3f 91       	pop	r19
 65c:	2f 91       	pop	r18
 65e:	0f 90       	pop	r0
 660:	0f be       	out	0x3f, r0	; 63
 662:	0f 90       	pop	r0
 664:	1f 90       	pop	r1
 666:	18 95       	reti

00000668 <__vector_21>:

ISR(ADC_vect)
{
 668:	1f 92       	push	r1
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	0f 92       	push	r0
 670:	11 24       	eor	r1, r1
 672:	8f 93       	push	r24
	potValue = ADCH;
 674:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 678:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <potValue>
}
 67c:	8f 91       	pop	r24
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <init_timer>:

void init_timer(void)
{
	
	//Modo CTC
	TCCR0A &= ~_BV(WGM00);
 688:	84 b5       	in	r24, 0x24	; 36
 68a:	8e 7f       	andi	r24, 0xFE	; 254
 68c:	84 bd       	out	0x24, r24	; 36
	TCCR0A |=  _BV(WGM01);
 68e:	84 b5       	in	r24, 0x24	; 36
 690:	82 60       	ori	r24, 0x02	; 2
 692:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~_BV(WGM02);
 694:	85 b5       	in	r24, 0x25	; 37
 696:	87 7f       	andi	r24, 0xF7	; 247
 698:	85 bd       	out	0x25, r24	; 37
	
	//Prescaler
	TCCR0B |=  _BV(CS02);
 69a:	85 b5       	in	r24, 0x25	; 37
 69c:	84 60       	ori	r24, 0x04	; 4
 69e:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~_BV(CS01);
 6a0:	85 b5       	in	r24, 0x25	; 37
 6a2:	8d 7f       	andi	r24, 0xFD	; 253
 6a4:	85 bd       	out	0x25, r24	; 37
	TCCR0B |=  _BV(CS00);
 6a6:	85 b5       	in	r24, 0x25	; 37
 6a8:	81 60       	ori	r24, 0x01	; 1
 6aa:	85 bd       	out	0x25, r24	; 37
	
	//Tope para 0.1s 1s
	OCR0A = 1250000;
 6ac:	80 ed       	ldi	r24, 0xD0	; 208
 6ae:	87 bd       	out	0x27, r24	; 39
	
	//Enable
	TIMSK0 |=  _BV(OCIE0A);
 6b0:	ee e6       	ldi	r30, 0x6E	; 110
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	82 60       	ori	r24, 0x02	; 2
 6b8:	80 83       	st	Z, r24
 6ba:	08 95       	ret

000006bc <ceil>:
 6bc:	0e 94 2c 04 	call	0x858	; 0x858 <__fp_trunc>
 6c0:	90 f0       	brcs	.+36     	; 0x6e6 <ceil+0x2a>
 6c2:	9f 37       	cpi	r25, 0x7F	; 127
 6c4:	48 f4       	brcc	.+18     	; 0x6d8 <ceil+0x1c>
 6c6:	91 11       	cpse	r25, r1
 6c8:	16 f4       	brtc	.+4      	; 0x6ce <ceil+0x12>
 6ca:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_szero>
 6ce:	60 e0       	ldi	r22, 0x00	; 0
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	80 e8       	ldi	r24, 0x80	; 128
 6d4:	9f e3       	ldi	r25, 0x3F	; 63
 6d6:	08 95       	ret
 6d8:	26 f0       	brts	.+8      	; 0x6e2 <ceil+0x26>
 6da:	1b 16       	cp	r1, r27
 6dc:	61 1d       	adc	r22, r1
 6de:	71 1d       	adc	r23, r1
 6e0:	81 1d       	adc	r24, r1
 6e2:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__fp_mintl>
 6e6:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__fp_mpack>

000006ea <__fixunssfsi>:
 6ea:	0e 94 12 04 	call	0x824	; 0x824 <__fp_splitA>
 6ee:	88 f0       	brcs	.+34     	; 0x712 <__fixunssfsi+0x28>
 6f0:	9f 57       	subi	r25, 0x7F	; 127
 6f2:	98 f0       	brcs	.+38     	; 0x71a <__fixunssfsi+0x30>
 6f4:	b9 2f       	mov	r27, r25
 6f6:	99 27       	eor	r25, r25
 6f8:	b7 51       	subi	r27, 0x17	; 23
 6fa:	b0 f0       	brcs	.+44     	; 0x728 <__fixunssfsi+0x3e>
 6fc:	e1 f0       	breq	.+56     	; 0x736 <__fixunssfsi+0x4c>
 6fe:	66 0f       	add	r22, r22
 700:	77 1f       	adc	r23, r23
 702:	88 1f       	adc	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	1a f0       	brmi	.+6      	; 0x70e <__fixunssfsi+0x24>
 708:	ba 95       	dec	r27
 70a:	c9 f7       	brne	.-14     	; 0x6fe <__fixunssfsi+0x14>
 70c:	14 c0       	rjmp	.+40     	; 0x736 <__fixunssfsi+0x4c>
 70e:	b1 30       	cpi	r27, 0x01	; 1
 710:	91 f0       	breq	.+36     	; 0x736 <__fixunssfsi+0x4c>
 712:	0e 94 44 04 	call	0x888	; 0x888 <__fp_zero>
 716:	b1 e0       	ldi	r27, 0x01	; 1
 718:	08 95       	ret
 71a:	0c 94 44 04 	jmp	0x888	; 0x888 <__fp_zero>
 71e:	67 2f       	mov	r22, r23
 720:	78 2f       	mov	r23, r24
 722:	88 27       	eor	r24, r24
 724:	b8 5f       	subi	r27, 0xF8	; 248
 726:	39 f0       	breq	.+14     	; 0x736 <__fixunssfsi+0x4c>
 728:	b9 3f       	cpi	r27, 0xF9	; 249
 72a:	cc f3       	brlt	.-14     	; 0x71e <__fixunssfsi+0x34>
 72c:	86 95       	lsr	r24
 72e:	77 95       	ror	r23
 730:	67 95       	ror	r22
 732:	b3 95       	inc	r27
 734:	d9 f7       	brne	.-10     	; 0x72c <__fixunssfsi+0x42>
 736:	3e f4       	brtc	.+14     	; 0x746 <__fixunssfsi+0x5c>
 738:	90 95       	com	r25
 73a:	80 95       	com	r24
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	08 95       	ret

00000748 <__floatunsisf>:
 748:	e8 94       	clt
 74a:	09 c0       	rjmp	.+18     	; 0x75e <__floatsisf+0x12>

0000074c <__floatsisf>:
 74c:	97 fb       	bst	r25, 7
 74e:	3e f4       	brtc	.+14     	; 0x75e <__floatsisf+0x12>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	99 23       	and	r25, r25
 760:	a9 f0       	breq	.+42     	; 0x78c <__floatsisf+0x40>
 762:	f9 2f       	mov	r31, r25
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	bb 27       	eor	r27, r27
 768:	93 95       	inc	r25
 76a:	f6 95       	lsr	r31
 76c:	87 95       	ror	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f1 11       	cpse	r31, r1
 776:	f8 cf       	rjmp	.-16     	; 0x768 <__floatsisf+0x1c>
 778:	fa f4       	brpl	.+62     	; 0x7b8 <__floatsisf+0x6c>
 77a:	bb 0f       	add	r27, r27
 77c:	11 f4       	brne	.+4      	; 0x782 <__floatsisf+0x36>
 77e:	60 ff       	sbrs	r22, 0
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <__floatsisf+0x6c>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	16 c0       	rjmp	.+44     	; 0x7b8 <__floatsisf+0x6c>
 78c:	88 23       	and	r24, r24
 78e:	11 f0       	breq	.+4      	; 0x794 <__floatsisf+0x48>
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <__floatsisf+0x6a>
 794:	77 23       	and	r23, r23
 796:	21 f0       	breq	.+8      	; 0x7a0 <__floatsisf+0x54>
 798:	9e e8       	ldi	r25, 0x8E	; 142
 79a:	87 2f       	mov	r24, r23
 79c:	76 2f       	mov	r23, r22
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__floatsisf+0x5e>
 7a0:	66 23       	and	r22, r22
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__floatsisf+0x74>
 7a4:	96 e8       	ldi	r25, 0x86	; 134
 7a6:	86 2f       	mov	r24, r22
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <__floatsisf+0x6c>
 7ae:	9a 95       	dec	r25
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	da f7       	brpl	.-10     	; 0x7ae <__floatsisf+0x62>
 7b8:	88 0f       	add	r24, r24
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_mintl>:
 7c2:	88 23       	and	r24, r24
 7c4:	71 f4       	brne	.+28     	; 0x7e2 <__fp_mintl+0x20>
 7c6:	77 23       	and	r23, r23
 7c8:	21 f0       	breq	.+8      	; 0x7d2 <__fp_mintl+0x10>
 7ca:	98 50       	subi	r25, 0x08	; 8
 7cc:	87 2b       	or	r24, r23
 7ce:	76 2f       	mov	r23, r22
 7d0:	07 c0       	rjmp	.+14     	; 0x7e0 <__fp_mintl+0x1e>
 7d2:	66 23       	and	r22, r22
 7d4:	11 f4       	brne	.+4      	; 0x7da <__fp_mintl+0x18>
 7d6:	99 27       	eor	r25, r25
 7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <__fp_mintl+0x32>
 7da:	90 51       	subi	r25, 0x10	; 16
 7dc:	86 2b       	or	r24, r22
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	2a f0       	brmi	.+10     	; 0x7ee <__fp_mintl+0x2c>
 7e4:	9a 95       	dec	r25
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	da f7       	brpl	.-10     	; 0x7e4 <__fp_mintl+0x22>
 7ee:	88 0f       	add	r24, r24
 7f0:	96 95       	lsr	r25
 7f2:	87 95       	ror	r24
 7f4:	97 f9       	bld	r25, 7
 7f6:	08 95       	ret

000007f8 <__fp_mpack>:
 7f8:	9f 3f       	cpi	r25, 0xFF	; 255
 7fa:	31 f0       	breq	.+12     	; 0x808 <__DATA_REGION_LENGTH__+0x8>

000007fc <__fp_mpack_finite>:
 7fc:	91 50       	subi	r25, 0x01	; 1
 7fe:	20 f4       	brcc	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	87 95       	ror	r24
 802:	77 95       	ror	r23
 804:	67 95       	ror	r22
 806:	b7 95       	ror	r27
 808:	88 0f       	add	r24, r24
 80a:	91 1d       	adc	r25, r1
 80c:	96 95       	lsr	r25
 80e:	87 95       	ror	r24
 810:	97 f9       	bld	r25, 7
 812:	08 95       	ret

00000814 <__fp_split3>:
 814:	57 fd       	sbrc	r21, 7
 816:	90 58       	subi	r25, 0x80	; 128
 818:	44 0f       	add	r20, r20
 81a:	55 1f       	adc	r21, r21
 81c:	59 f0       	breq	.+22     	; 0x834 <__fp_splitA+0x10>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	71 f0       	breq	.+28     	; 0x83e <__fp_splitA+0x1a>
 822:	47 95       	ror	r20

00000824 <__fp_splitA>:
 824:	88 0f       	add	r24, r24
 826:	97 fb       	bst	r25, 7
 828:	99 1f       	adc	r25, r25
 82a:	61 f0       	breq	.+24     	; 0x844 <__fp_splitA+0x20>
 82c:	9f 3f       	cpi	r25, 0xFF	; 255
 82e:	79 f0       	breq	.+30     	; 0x84e <__fp_splitA+0x2a>
 830:	87 95       	ror	r24
 832:	08 95       	ret
 834:	12 16       	cp	r1, r18
 836:	13 06       	cpc	r1, r19
 838:	14 06       	cpc	r1, r20
 83a:	55 1f       	adc	r21, r21
 83c:	f2 cf       	rjmp	.-28     	; 0x822 <__fp_split3+0xe>
 83e:	46 95       	lsr	r20
 840:	f1 df       	rcall	.-30     	; 0x824 <__fp_splitA>
 842:	08 c0       	rjmp	.+16     	; 0x854 <__fp_splitA+0x30>
 844:	16 16       	cp	r1, r22
 846:	17 06       	cpc	r1, r23
 848:	18 06       	cpc	r1, r24
 84a:	99 1f       	adc	r25, r25
 84c:	f1 cf       	rjmp	.-30     	; 0x830 <__fp_splitA+0xc>
 84e:	86 95       	lsr	r24
 850:	71 05       	cpc	r23, r1
 852:	61 05       	cpc	r22, r1
 854:	08 94       	sec
 856:	08 95       	ret

00000858 <__fp_trunc>:
 858:	0e 94 12 04 	call	0x824	; 0x824 <__fp_splitA>
 85c:	a0 f0       	brcs	.+40     	; 0x886 <__fp_trunc+0x2e>
 85e:	be e7       	ldi	r27, 0x7E	; 126
 860:	b9 17       	cp	r27, r25
 862:	88 f4       	brcc	.+34     	; 0x886 <__fp_trunc+0x2e>
 864:	bb 27       	eor	r27, r27
 866:	9f 38       	cpi	r25, 0x8F	; 143
 868:	60 f4       	brcc	.+24     	; 0x882 <__fp_trunc+0x2a>
 86a:	16 16       	cp	r1, r22
 86c:	b1 1d       	adc	r27, r1
 86e:	67 2f       	mov	r22, r23
 870:	78 2f       	mov	r23, r24
 872:	88 27       	eor	r24, r24
 874:	98 5f       	subi	r25, 0xF8	; 248
 876:	f7 cf       	rjmp	.-18     	; 0x866 <__fp_trunc+0xe>
 878:	86 95       	lsr	r24
 87a:	77 95       	ror	r23
 87c:	67 95       	ror	r22
 87e:	b1 1d       	adc	r27, r1
 880:	93 95       	inc	r25
 882:	96 39       	cpi	r25, 0x96	; 150
 884:	c8 f3       	brcs	.-14     	; 0x878 <__fp_trunc+0x20>
 886:	08 95       	ret

00000888 <__fp_zero>:
 888:	e8 94       	clt

0000088a <__fp_szero>:
 88a:	bb 27       	eor	r27, r27
 88c:	66 27       	eor	r22, r22
 88e:	77 27       	eor	r23, r23
 890:	cb 01       	movw	r24, r22
 892:	97 f9       	bld	r25, 7
 894:	08 95       	ret

00000896 <__mulsf3>:
 896:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__mulsf3x>
 89a:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__fp_round>
 89e:	0e 94 c1 04 	call	0x982	; 0x982 <__fp_pscA>
 8a2:	38 f0       	brcs	.+14     	; 0x8b2 <__mulsf3+0x1c>
 8a4:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscB>
 8a8:	20 f0       	brcs	.+8      	; 0x8b2 <__mulsf3+0x1c>
 8aa:	95 23       	and	r25, r21
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <__mulsf3+0x1c>
 8ae:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_inf>
 8b2:	0c 94 be 04 	jmp	0x97c	; 0x97c <__fp_nan>
 8b6:	11 24       	eor	r1, r1
 8b8:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_szero>

000008bc <__mulsf3x>:
 8bc:	0e 94 0a 04 	call	0x814	; 0x814 <__fp_split3>
 8c0:	70 f3       	brcs	.-36     	; 0x89e <__mulsf3+0x8>

000008c2 <__mulsf3_pse>:
 8c2:	95 9f       	mul	r25, r21
 8c4:	c1 f3       	breq	.-16     	; 0x8b6 <__mulsf3+0x20>
 8c6:	95 0f       	add	r25, r21
 8c8:	50 e0       	ldi	r21, 0x00	; 0
 8ca:	55 1f       	adc	r21, r21
 8cc:	62 9f       	mul	r22, r18
 8ce:	f0 01       	movw	r30, r0
 8d0:	72 9f       	mul	r23, r18
 8d2:	bb 27       	eor	r27, r27
 8d4:	f0 0d       	add	r31, r0
 8d6:	b1 1d       	adc	r27, r1
 8d8:	63 9f       	mul	r22, r19
 8da:	aa 27       	eor	r26, r26
 8dc:	f0 0d       	add	r31, r0
 8de:	b1 1d       	adc	r27, r1
 8e0:	aa 1f       	adc	r26, r26
 8e2:	64 9f       	mul	r22, r20
 8e4:	66 27       	eor	r22, r22
 8e6:	b0 0d       	add	r27, r0
 8e8:	a1 1d       	adc	r26, r1
 8ea:	66 1f       	adc	r22, r22
 8ec:	82 9f       	mul	r24, r18
 8ee:	22 27       	eor	r18, r18
 8f0:	b0 0d       	add	r27, r0
 8f2:	a1 1d       	adc	r26, r1
 8f4:	62 1f       	adc	r22, r18
 8f6:	73 9f       	mul	r23, r19
 8f8:	b0 0d       	add	r27, r0
 8fa:	a1 1d       	adc	r26, r1
 8fc:	62 1f       	adc	r22, r18
 8fe:	83 9f       	mul	r24, r19
 900:	a0 0d       	add	r26, r0
 902:	61 1d       	adc	r22, r1
 904:	22 1f       	adc	r18, r18
 906:	74 9f       	mul	r23, r20
 908:	33 27       	eor	r19, r19
 90a:	a0 0d       	add	r26, r0
 90c:	61 1d       	adc	r22, r1
 90e:	23 1f       	adc	r18, r19
 910:	84 9f       	mul	r24, r20
 912:	60 0d       	add	r22, r0
 914:	21 1d       	adc	r18, r1
 916:	82 2f       	mov	r24, r18
 918:	76 2f       	mov	r23, r22
 91a:	6a 2f       	mov	r22, r26
 91c:	11 24       	eor	r1, r1
 91e:	9f 57       	subi	r25, 0x7F	; 127
 920:	50 40       	sbci	r21, 0x00	; 0
 922:	9a f0       	brmi	.+38     	; 0x94a <__stack+0x4b>
 924:	f1 f0       	breq	.+60     	; 0x962 <__stack+0x63>
 926:	88 23       	and	r24, r24
 928:	4a f0       	brmi	.+18     	; 0x93c <__stack+0x3d>
 92a:	ee 0f       	add	r30, r30
 92c:	ff 1f       	adc	r31, r31
 92e:	bb 1f       	adc	r27, r27
 930:	66 1f       	adc	r22, r22
 932:	77 1f       	adc	r23, r23
 934:	88 1f       	adc	r24, r24
 936:	91 50       	subi	r25, 0x01	; 1
 938:	50 40       	sbci	r21, 0x00	; 0
 93a:	a9 f7       	brne	.-22     	; 0x926 <__stack+0x27>
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	51 05       	cpc	r21, r1
 940:	80 f0       	brcs	.+32     	; 0x962 <__stack+0x63>
 942:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_inf>
 946:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_szero>
 94a:	5f 3f       	cpi	r21, 0xFF	; 255
 94c:	e4 f3       	brlt	.-8      	; 0x946 <__stack+0x47>
 94e:	98 3e       	cpi	r25, 0xE8	; 232
 950:	d4 f3       	brlt	.-12     	; 0x946 <__stack+0x47>
 952:	86 95       	lsr	r24
 954:	77 95       	ror	r23
 956:	67 95       	ror	r22
 958:	b7 95       	ror	r27
 95a:	f7 95       	ror	r31
 95c:	e7 95       	ror	r30
 95e:	9f 5f       	subi	r25, 0xFF	; 255
 960:	c1 f7       	brne	.-16     	; 0x952 <__stack+0x53>
 962:	fe 2b       	or	r31, r30
 964:	88 0f       	add	r24, r24
 966:	91 1d       	adc	r25, r1
 968:	96 95       	lsr	r25
 96a:	87 95       	ror	r24
 96c:	97 f9       	bld	r25, 7
 96e:	08 95       	ret

00000970 <__fp_inf>:
 970:	97 f9       	bld	r25, 7
 972:	9f 67       	ori	r25, 0x7F	; 127
 974:	80 e8       	ldi	r24, 0x80	; 128
 976:	70 e0       	ldi	r23, 0x00	; 0
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	08 95       	ret

0000097c <__fp_nan>:
 97c:	9f ef       	ldi	r25, 0xFF	; 255
 97e:	80 ec       	ldi	r24, 0xC0	; 192
 980:	08 95       	ret

00000982 <__fp_pscA>:
 982:	00 24       	eor	r0, r0
 984:	0a 94       	dec	r0
 986:	16 16       	cp	r1, r22
 988:	17 06       	cpc	r1, r23
 98a:	18 06       	cpc	r1, r24
 98c:	09 06       	cpc	r0, r25
 98e:	08 95       	ret

00000990 <__fp_pscB>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	12 16       	cp	r1, r18
 996:	13 06       	cpc	r1, r19
 998:	14 06       	cpc	r1, r20
 99a:	05 06       	cpc	r0, r21
 99c:	08 95       	ret

0000099e <__fp_round>:
 99e:	09 2e       	mov	r0, r25
 9a0:	03 94       	inc	r0
 9a2:	00 0c       	add	r0, r0
 9a4:	11 f4       	brne	.+4      	; 0x9aa <__fp_round+0xc>
 9a6:	88 23       	and	r24, r24
 9a8:	52 f0       	brmi	.+20     	; 0x9be <__fp_round+0x20>
 9aa:	bb 0f       	add	r27, r27
 9ac:	40 f4       	brcc	.+16     	; 0x9be <__fp_round+0x20>
 9ae:	bf 2b       	or	r27, r31
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__fp_round+0x18>
 9b2:	60 ff       	sbrs	r22, 0
 9b4:	04 c0       	rjmp	.+8      	; 0x9be <__fp_round+0x20>
 9b6:	6f 5f       	subi	r22, 0xFF	; 255
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	08 95       	ret

000009c0 <__tablejump2__>:
 9c0:	ee 0f       	add	r30, r30
 9c2:	ff 1f       	adc	r31, r31
 9c4:	05 90       	lpm	r0, Z+
 9c6:	f4 91       	lpm	r31, Z
 9c8:	e0 2d       	mov	r30, r0
 9ca:	09 94       	ijmp

000009cc <__umulhisi3>:
 9cc:	a2 9f       	mul	r26, r18
 9ce:	b0 01       	movw	r22, r0
 9d0:	b3 9f       	mul	r27, r19
 9d2:	c0 01       	movw	r24, r0
 9d4:	a3 9f       	mul	r26, r19
 9d6:	70 0d       	add	r23, r0
 9d8:	81 1d       	adc	r24, r1
 9da:	11 24       	eor	r1, r1
 9dc:	91 1d       	adc	r25, r1
 9de:	b2 9f       	mul	r27, r18
 9e0:	70 0d       	add	r23, r0
 9e2:	81 1d       	adc	r24, r1
 9e4:	11 24       	eor	r1, r1
 9e6:	91 1d       	adc	r25, r1
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
